---

# It expects the facts:
# compose_name: docker_compose name
# docker_service: docker service struct

- name: docker_service
  debug:
    var: "docker_service"

- name: Create docker volumes root folder
  become: yes
  file:
    path: "{{ docker_volumes_path }}/{{ compose_name }}"
    recurse: yes
    state: directory

- name: Check if each volume directory exists
  stat:
    path: "{{ docker_volumes_path }}/{{ compose_name }}/{{ volume_name }}"
  loop: "{{ docker_service.volumes.keys() }}"
  loop_control:
    loop_var: volume_name
  register: volume_names

- name: Create dirs for volumes
  become: yes
  file:
    path: "{{ docker_volumes_path }}/{{ compose_name }}/{{ volume_name }}"
    state: directory
  loop: "{{ docker_service.volumes.keys() }}"
  loop_control:
    loop_var: volume_name


# Synology don't offer rsync with key auth. Even when configuring it manually over the shell,
# the rsync server will still ask for a passwork (even when key ssh works fine).
# With does requirements and the limited functionality offered by synchronize module, I opted to use raw command
- name: Synchronize missing volumes from NAS backup
  become: yes
  ansible.builtin.shell: "/usr/bin/rsync --delay-updates -F --compress --archive --archive --verbose --delete --rsh='/usr/bin/sshpass -p {{ nas.backup.password }} ssh -o StrictHostKeyChecking=no -l {{ nas.backup.user }}' --out-format='<<CHANGED>>%i %n%L' rsync://{{ nas.backup.user }}@{{ nas.host }}:{{ nas.backup.share }}/docker/{{ compose_name }}/{{ item }} {{ docker_volumes_path }}/{{ compose_name }}/{{ item }}/"
  when:
    - not volume_names.results[item_index].stat.exists
  loop: "{{ docker_service.volumes.keys() }}"
  loop_control:
    index_var: item_index
    loop_var: item
  register: result
  failed_when: not (result.rc == 0 or result.rc == 23)